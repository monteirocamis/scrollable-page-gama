/**
 * Encrypts plaintext using AES-GCM with supplied password, for decryption with aesGcmDecrypt().
 *                                                                      (c) Chris Veness MIT Licence
 * https://gist.github.com/chrisveness/43bcda93af9f646d083fad678071b90a
 * Modified to work with Uint8Array and string content.
 *
 * @param content - Plaintext or Uint8 Buffer to be encrypted.
 * @param password - Plaintext or Uint8 Buffer Password to use to encrypt content.
 * @param prefix - Optional prefix to prepend to the ciphertext.
 * @returns Encrypted ciphertext. If content is a string, the ciphertext is a string. If content is a Uint8Array, the ciphertext is a new Uint8Array.
 *
 *
 * @example
 *   const ciphertext = await aesGcmEncrypt('my secret text', 'pw');
 *   aesGcmEncrypt('my secret text', 'pw').then(function(ciphertext) { console.log(ciphertext); });
 *
 * @category Encryption
 */
export declare function aesGcmEncrypt<T extends string | Uint8Array>(content: T, password: string | Uint8Array, prefix?: string | Uint8Array): Promise<T>;
/**
 * Decrypts ciphertext encrypted with aesGcmEncrypt() using supplied password.
 *                                                                      (c) Chris Veness MIT Licence
 *
 * https://gist.github.com/chrisveness/43bcda93af9f646d083fad678071b90a
 * Modified to work with Uint8Array and string content.
 *
 * @param ciphertext - Ciphertext to be decrypted.
 * @param password - Password to use to decrypt ciphertext.
 * @returns Decrypted content. If ciphertext is a string, the plaintext is a string. If ciphertext is a Uint8Array, the plaintext is a new Uint8Array.
 *
 * @example
 *   const plaintext = await aesGcmDecrypt(ciphertext, 'pw');
 *   aesGcmDecrypt(ciphertext, 'pw').then(function(plaintext) { console.log(plaintext); });
 *
 * @category Encryption
 */
export declare function aesGcmDecrypt<T extends string | Uint8Array>(ciphertext: T, password: string | Uint8Array): Promise<T>;
//# sourceMappingURL=encryption.d.ts.map