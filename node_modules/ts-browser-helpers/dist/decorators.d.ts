import { AnyFunction } from "./types";
/**
 * Decorator that redefines a property with getter and setter, and calls a function when the property is changed.
 * Parameters passed to the function are the property key and the new value.
 * @note - Does not work with "target": "esnext" in tsconfig.json
 * @note - Requires "experimentalDecorators": true in tsconfig.json
 * @todo add example.
 * @param fnKey - use: `<MyClass>.prototype.<myFunction>` or define an arrow function: `(key, value, oldValue) => {}`.
 * @param paramType -
 * if param, the function is called with 3 parameters: `key, value, oldValue`, default for {@link onChange}
 * if object, the function is called with an object parameter: `{key, value, oldValue}`, default for {@link onChange3}
 * if void then no params are passed. {@link onChange2}
 * Default: false.
 *
 * @category Decorators
 */
export declare function onChange(fnKey: string | ((key: string, value: any, oldValue: any) => void), paramType?: 'param' | 'object' | 'void'): PropertyDecorator;
/**
 * Similar to {@link onChange}, but accepts any function and paramType defaults to 'void'. The function is called with no parameters. if 'void'
 * @param fnKey
 * @param paramType
 */
export declare function onChange2(fnKey: string | AnyFunction, paramType?: 'param' | 'object' | 'void'): PropertyDecorator;
/**
 * Similar to {@link onChange}, but accepts any function and paramType defaults to 'object'. The function is called with an object parameter: `{key, value, oldValue}`.
 * @param fnKey
 * @param paramType
 */
export declare function onChange3(fnKey: string | ((obj: {
    key: string;
    value: any;
    oldValue: any;
}) => void), paramType?: 'object' | 'void'): PropertyDecorator;
/**
 * Decorator to mark a class property as serializable using the {@link Serialization} class.
 * @note - Requires "experimentalDecorators": true in tsconfig.json
 * @param key - The key to use when serializing the property. If not provided, the property name is used (for this make sure the property name is not mangled during minification).
 * @category Decorators
 */
export declare function serialize(key?: string): PropertyDecorator;
/**
 * Decorator to mark a class as serializable using the {@link Serialization} class.
 * @note - Requires "experimentalDecorators": true in tsconfig.json
 * @param id - The id to use when serializing the class. This is used to identify the class when deserializing. Class names can be mangled during minification, so it is required to provide an id.
 */
export declare function serializable(id: string): <T extends new (...args: any[]) => any>(constructor: T) => T;
//# sourceMappingURL=decorators.d.ts.map