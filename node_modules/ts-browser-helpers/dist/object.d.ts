/**
 * Access property in an object using a string path. Similar to lodash.get
 * @param access - path to access
 * @param tar - target object
 * @param throwOnInvalid - throw error if invalid access or property is undefined. Default is false
 *
 * @example
 * ```js
 * const obj = {a: {b: {c: 1}}}
 * const c = deepAccessObject(['a', 'b', 'c'], obj)
 * console.log(c) // 1
 * ```
 *
 * @category JS Object
 */
export declare function deepAccessObject(access: string | string[], tar: any, throwOnInvalid?: boolean): any;
/**
 * Find the key of an object with a given value.
 * @param object - object to search
 * @param value - value to search for
 *
 * @category JS Object
 */
export declare function getKeyByValue(object: Record<string, any>, value: any): string | undefined;
/**
 * Check if an object has a property. Same as {@link Object.hasOwn} or {@link Object.hasOwnProperty}
 * @param o
 * @param v
 */
export declare function objectHasOwn(o: object, v: PropertyKey): boolean;
//# sourceMappingURL=object.d.ts.map