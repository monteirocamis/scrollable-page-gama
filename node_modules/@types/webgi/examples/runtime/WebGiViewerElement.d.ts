import { CoreViewerApp } from './helpers';
export declare class WebGiViewerElement extends HTMLElement {
    readonly viewerIndex: number;
    viewer?: CoreViewerApp;
    canvas?: HTMLCanvasElement;
    wrapper: HTMLDivElement;
    private _initialized;
    readonly canvasId: string;
    constructor();
    refreshAll(): Promise<void>;
    private _initialize;
    connectedCallback(): void;
    disconnectedCallback(): void;
    adoptedCallback(): void;
    static get observedAttributes(): string[];
    attributeChangedCallback(name: string, oldValue: string, newValue: string): void;
    private _state;
    private _models;
    private _refreshingModels;
    private _refreshingEnvironment;
    clearViewer(): void;
    private _environmentFromSource;
    refreshModelSource(): Promise<void>;
    refreshEnvironment(): Promise<void>;
    private _getAttr;
    addEventListener<K extends keyof HTMLElementEventMap2>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap2[K]) => any, options?: boolean | AddEventListenerOptions): void;
}
export type HTMLElementEventMap2 = HTMLElementEventMap & {
    initialized: Event;
};
//# sourceMappingURL=WebGiViewerElement.d.ts.map