import { Color, Material, Object3D, WebGLMultipleRenderTargets, WebGLRenderer, WebGLRenderTarget } from 'three';
import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';
export declare class OutlineRenderPass extends RenderPass {
    target: WebGLRenderTarget;
    private _getSelectedObject;
    constructor(getSelectedObject: () => Object3D<Event>, target: WebGLRenderTarget, material: Material, clearColor?: Color, clearAlpha?: number);
    /**
     * Renders to this.target
     * @param renderer
     * @param writeBuffer - this is ignored
     * @param readBuffer - this is ignored
     * @param deltaTime
     * @param maskActive
     */
    render(renderer: WebGLRenderer, writeBuffer: WebGLMultipleRenderTargets | WebGLRenderTarget | null, readBuffer?: WebGLMultipleRenderTargets | WebGLRenderTarget, deltaTime?: number, maskActive?: boolean): void;
    private _renderSelectedObject;
}
//# sourceMappingURL=OutlineRenderPass.d.ts.map