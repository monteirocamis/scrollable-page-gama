import { Vector3 } from 'three';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
/**
 * Camera parallax effect using asymmetric frustum using mouse or gyroscope as input
 */
export declare class ParallaxCameraControllerPlugin extends AViewerPlugin<''> implements IUiConfigContainer {
    static readonly PluginType = "ParallaxCameraControllerPlugin";
    uiConfig: UiObjectConfig;
    enabled: boolean;
    enableEdit: boolean;
    invert: boolean;
    sensitivity: number;
    focalPointHit: Vector3;
    damping: number;
    /**
     * Name of the camera view from the CameraViewPlugin
     */
    cameraView: string;
    private _indicator?;
    /**
     * Camera
     * @private
     */
    private _object?;
    private _target;
    private _center;
    private _input?;
    private _pointerDown;
    private _focalDistance;
    constructor();
    onAdded(v: ViewerApp): Promise<void>;
    private _onActiveCameraChange;
    private _updateProjectionMatrix;
    addIndicator(): void;
    onPointerDown(e: MouseEvent): void;
    onPointerUp(): void;
    private _preFrame;
    private _offX;
    private _offY;
    private _xDamper;
    private _yDamper;
    update(delta: number): void;
    protected _onObjectHit(e: any): void;
    private _updateFocalDistance;
    private _onEnabledChange;
    private _onDampingChange;
    dispose(): void;
}
//# sourceMappingURL=ParallaxCameraControllerPlugin.d.ts.map