import { IEvent } from 'ts-browser-helpers';
import { IViewerPlugin, UiObjectConfig } from 'webgi/interfaces';
import { BufferGeometry, Mesh, MeshStandardMaterial } from 'three';
import { ShadowMapBaker } from 'webgi/extras/ShadowMapBaker';
import { Reflector2 } from 'webgi/helpers/threejs/Reflector2';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { BaseGroundPlugin, GroundOptions } from 'webgi/plugins/BaseGroundPlugin';
export declare class GroundPlugin<TMesh extends Mesh<BufferGeometry, MeshStandardMaterial> | Reflector2 = Mesh<BufferGeometry, MeshStandardMaterial> | Reflector2> extends BaseGroundPlugin<TMesh> implements IViewerPlugin {
    get shadowBaker(): ShadowMapBaker | undefined;
    static readonly PluginType = "Ground";
    bakedShadows: boolean;
    groundReflection: boolean;
    physicalReflections: boolean;
    private _shadowBaker?;
    private _showDebug;
    /**
     * autoBakeShadows - when true, shadows are baked automatically on scene update(whenever any object in the scene changes), set it to `false` to trigger baking manually with {@see bakeShadows()}
     */
    autoBakeShadows: boolean;
    /**
     * bake shadows manually, to be used with {@see autoBakeShadows} set to false
     */
    bakeShadows(): void;
    constructor(options?: Partial<GroundOptions>, showDebug?: boolean);
    protected _createMesh(): Mesh;
    onAdded(viewer: ViewerApp): Promise<void>;
    protected _postFrame(): void;
    protected _preRender(): void;
    onDispose(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    protected _removeMaterial(): void;
    protected _onSceneUpdate(event: IEvent<string>): void;
    refreshOptions(): void;
    protected _refreshMaterial(): boolean;
    protected _extraUiConfig(): (UiObjectConfig | (() => UiObjectConfig | UiObjectConfig[]))[];
}
//# sourceMappingURL=GroundPlugin.d.ts.map