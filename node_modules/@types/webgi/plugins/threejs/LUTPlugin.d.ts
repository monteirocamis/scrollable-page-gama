import { IGBufferUpdater, IMaterial, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Material, Object3D, Shader, Vector4, WebGLRenderer } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { GenericExtensionPlugin } from '../GenericExtensionPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { LUTCubeTextureWrapper } from 'webgi/extras/asset_manager/importer/threejs/loaders/LUTCubeLoader2';
declare class LUTExtension implements IUiConfigContainer, MaterialExtension {
    uiConfig?: UiObjectConfig;
    enabled: boolean;
    lutBackground: boolean;
    intensity: number;
    lutMap: LUTCubeTextureWrapper | undefined;
    lutMap1: LUTCubeTextureWrapper | undefined;
    lutMap2: LUTCubeTextureWrapper | undefined;
    private _combinedPostPlugin;
    private _viewer;
    extraUniforms: any;
    extraDefines: any;
    parsFragmentSnippet: any;
    constructor(viewer: ViewerApp);
    private _updateParams;
    private _updateLUTMap;
    shaderExtender(shader: Shader, material: IMaterial, renderer: WebGLRenderer): void;
    computeCacheKey(material: IMaterial): string;
    isCompatible(material: IMaterial): boolean;
    __setDirty?: () => void;
    private _setDirty;
    setDirty(): void;
}
export declare function addLUTData(material: Material): boolean;
export declare class LUTPlugin extends GenericExtensionPlugin<LUTExtension> implements IGBufferUpdater {
    static readonly PluginType = "LUTPlugin1";
    private _getUiConfig;
    readonly materialExtension: MaterialExtension;
    constructor();
    onAdded(viewer: ViewerApp): Promise<void>;
    generateExtension(viewer: ViewerApp): LUTExtension;
    updateGBuffer(object: Object3D, data: Vector4): void;
}
export {};
//# sourceMappingURL=LUTPlugin.d.ts.map