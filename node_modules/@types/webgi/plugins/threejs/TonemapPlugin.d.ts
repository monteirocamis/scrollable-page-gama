import { IGBufferUpdater, IMaterial, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Object3D, Shader, ToneMapping, Vector4, WebGLRenderer } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { GenericExtensionPlugin } from '../GenericExtensionPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare const Uncharted2Tonemapping: ToneMapping;
declare class TonemapExtension implements IUiConfigContainer, MaterialExtension {
    readonly depthTonemap: boolean;
    uiConfig: UiObjectConfig;
    toneMapping: ToneMapping;
    tonemapBackground: boolean;
    clipBackground: boolean;
    exposure: number;
    saturation: number;
    contrast: number;
    renderDepth: boolean;
    static readonly PluginType = "Tonemap";
    enabled: boolean;
    private _rendererState;
    private _combinedPostPlugin;
    extraUniforms: any;
    parsFragmentSnippet: any;
    /**
     *
     * @param depthTonemap
     */
    constructor(viewer: ViewerApp, depthTonemap?: boolean);
    shaderExtender(shader: Shader, material: IMaterial, renderer: WebGLRenderer): void;
    onObjectRender(object: Object3D, material: IMaterial, renderer: WebGLRenderer): void;
    onAfterRender(object: Object3D, material: IMaterial, renderer: WebGLRenderer): void;
    getUiConfig(): any;
    computeCacheKey(material: IMaterial): string;
    isCompatible(material: IMaterial): boolean;
    private _setDirty;
    __setDirty?: () => void;
    setDirty(): void;
}
export declare class TonemapPlugin extends GenericExtensionPlugin<TonemapExtension> implements IGBufferUpdater {
    readonly depthTonemap: boolean;
    static readonly PluginType = "Tonemap";
    constructor(depthTonemap?: boolean);
    fromJSON(data: any, meta?: any): this | Promise<this | null> | null;
    onAdded(viewer: ViewerApp): Promise<void>;
    generateExtension(viewer: ViewerApp): TonemapExtension;
    get exposure(): number;
    set exposure(value: number);
    get saturation(): number;
    set saturation(value: number);
    get contrast(): number;
    set contrast(value: number);
    get toneMapping(): ToneMapping;
    set toneMapping(value: ToneMapping);
    updateGBuffer(object: Object3D, data: Vector4): void;
}
export {};
//# sourceMappingURL=TonemapPlugin.d.ts.map