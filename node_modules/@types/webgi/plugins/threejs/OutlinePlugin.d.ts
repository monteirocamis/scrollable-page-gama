import { IMaterial, IUiConfigContainer, UiObjectConfig } from 'webgi/interfaces';
import { Color, Shader, WebGLRenderer, WebGLRenderTarget } from 'three';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { GenericExtensionPlugin } from '../GenericExtensionPlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
declare class OutlineExtension implements IUiConfigContainer, MaterialExtension {
    uiConfig?: UiObjectConfig;
    enabled: boolean;
    enableHighlight: boolean;
    enableDynamicSelection: boolean;
    outlineIntensity: number;
    highlightTransparency: number;
    outlineColor: Color;
    debugOutline: boolean;
    /**
     * For internal use
     */
    transparency: number;
    private _outlineThickness;
    static readonly PluginType = "Outline";
    private _combinedPostPlugin;
    private _pickingPlugin;
    extraUniforms: any;
    extraDefines: any;
    parsFragmentSnippet: any;
    constructor(viewer: ViewerApp, outlineTarget: WebGLRenderTarget | undefined);
    shaderExtender(shader: Shader, material: IMaterial, renderer: WebGLRenderer): void;
    getUiConfig(): any;
    computeCacheKey(material: IMaterial): string;
    isCompatible(material: IMaterial): boolean;
    private _setDirty;
    __setDirty?: () => void;
    setDirty(): void;
    private _enable;
}
export declare class OutlinePlugin extends GenericExtensionPlugin<OutlineExtension> {
    static readonly PluginType = "Outline";
    private _outlineTarget;
    _animationCallBack: any;
    private _state;
    mouseInOutAnimationEnabled: boolean;
    constructor();
    generateExtension(viewer: ViewerApp): OutlineExtension;
    onAdded(viewer: ViewerApp): Promise<void>;
    private _startTransparencyAnimation;
}
export {};
//# sourceMappingURL=OutlinePlugin.d.ts.map