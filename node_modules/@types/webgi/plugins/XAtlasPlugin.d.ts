import { ChartOptions, PackOptions } from 'xatlas-three';
import { BufferGeometry, Object3D } from 'three';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
export declare class UChartOptions implements ChartOptions {
    fixWinding: boolean;
    maxBoundaryLength: number;
    maxChartArea: number;
    maxCost: number;
    maxIterations: number;
    normalDeviationWeight: number;
    normalSeamWeight: number;
    roundnessWeight: number;
    straightnessWeight: number;
    textureSeamWeight: number;
    useInputMeshUvs: boolean;
}
export declare class UPackOptions implements PackOptions {
    bilinear: boolean;
    blockAlign: boolean;
    bruteForce: boolean;
    createImage: boolean;
    maxChartSize: number;
    padding: number;
    resolution: number;
    rotateCharts: boolean;
    rotateChartsToAxis: boolean;
    texelsPerUnit: number;
}
export declare class XAtlasPlugin extends AViewerPlugin<''> {
    static readonly PluginType = "XAtlasPlugin";
    enabled: boolean;
    private _unwrapper?;
    useNormals: boolean;
    chartOptions: UChartOptions;
    packOptions: UPackOptions;
    constructor(preload?: boolean);
    private _loaded;
    static LIBRARY_PATH: string;
    loadLibrary(): Promise<void>;
    private _unwrapProgress;
    unwrapGeometry(geometry: BufferGeometry, outputUv?: 'uv2' | 'uv', inputUv?: 'uv2' | 'uv'): Promise<void>;
    packAtlas(root: Object3D | Object3D[], traverseChildren?: boolean, outputUv?: 'uv2' | 'uv', inputUv?: 'uv2' | 'uv'): Promise<void>;
    unwrapSelected: () => Promise<void>;
    private _useNormalsChanged;
}
//# sourceMappingURL=XAtlasPlugin.d.ts.map