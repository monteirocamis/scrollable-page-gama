import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { AssetManagerPlugin } from 'webgi/extras/asset_manager/AssetManagerPlugin';
import { IFile, IMaterial, IModel } from 'webgi/interfaces';
import { Object3D } from 'three';
import { Unzipped, Zippable } from 'fflate';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export interface IConfiguratorVariation {
    name: string;
    prefix: string;
    title: string;
    icon: string;
    icons: string[];
    titles: string[];
    items: string[];
    itemFiles: (Blob | undefined)[];
    iconFiles: (Blob | undefined)[];
    selected?: number;
    data?: {
        traverse?: boolean;
        matType?: string;
        [key: string]: any;
    };
}
export declare class VariationConfiguratorPlugin extends AViewerPlugin<''> {
    static readonly PluginType = "VariationConfiguratorPlugin";
    dependencies: (typeof AssetManagerPlugin)[];
    enabled: boolean;
    baseUrl: string;
    variations: {
        objects: IConfiguratorVariation[];
        materials: IConfiguratorVariation[];
    };
    /**
     * Default = true. When set to false the items will not be disposed when removed.
     */
    autoDispose: boolean;
    private _getVariationId;
    applyVariation(variation: IConfiguratorVariation, item: number | string, type: 'objects' | 'materials', force?: boolean): Promise<void>;
    clearVariations(): void;
    protected _loadMaterial(path: string, blob?: IFile): Promise<IMaterial<any> | undefined>;
    protected _loadObject(path: string, blob?: IFile): Promise<IModel<Object3D<import("three").Event, string>>[]>;
    protected _ty: readonly ["objects", "materials"];
    protected _extForType: {
        objects: string[];
        materials: string[];
        images: string[];
    };
    importConfig(config: any, folder?: Unzipped): void;
    importPath(configPath: string): Promise<void>;
    getMaterials(name: string): string[];
    getObjects(name: string): string[];
    getMaterialVariations(): string[];
    getObjectVariations(): string[];
    readonly utils: {
        getName: (item: IConfiguratorVariation | {
            name?: string;
            prefix: string;
        }) => string;
        getTitle: (item: IConfiguratorVariation) => string;
        getIcon: (variation: IConfiguratorVariation, type: 'objects' | 'materials') => string;
        getItemIcon: (variation: IConfiguratorVariation, i: number, type: 'objects' | 'materials') => string;
        getItemTitle: (variation: IConfiguratorVariation, i: number) => string;
        getItemPath: (variation: IConfiguratorVariation, i: number, type: 'objects' | 'materials') => string;
        pathToTitle: (item: string) => string;
        pathToIcon: (item: string) => string;
    };
    onRemove(viewer: ViewerApp): Promise<void>;
    fromJSON(json: any): this | null;
    toJSON: any;
    protected _exportConfiguratorState(): Promise<{
        folder: Zippable | undefined;
        config: any;
    }>;
}
//# sourceMappingURL=VariationConfiguratorPlugin.d.ts.map