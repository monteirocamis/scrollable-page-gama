import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { UiObjectConfig } from 'webgi/interfaces';
import { AssetManagerPlugin } from 'webgi/extras/asset_manager/AssetManagerPlugin';
import { AnimationAction, AnimationClip, AnimationMixer } from 'three';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class GLTFAnimationPlugin extends AViewerPlugin<'checkpointEnd' | 'checkpointBegin' | 'animationStep'> {
    enabled: boolean;
    static readonly PluginType = "GLTFAnimation";
    private _lastAnimationTime;
    /**
     * If true, the animation time will be automatically incremented by the time delta, otherwise it has to be set manually between 0 and the animationDuration using `setTime`. (default: true)
     */
    autoIncrementTime: boolean;
    get animationState(): 'none' | 'playing' | 'paused' | 'stopped';
    get animationTime(): number;
    get animationDuration(): number;
    setTime(time: number): void;
    readonly animations: {
        mixer: AnimationMixer;
        clips: AnimationClip[];
        actions: AnimationAction[];
        duration: number;
    }[];
    loopAnimations: boolean;
    loopRepetitions: number;
    /**
     * Timescale for the animation. (not individual actions)
     * If set to 0, it will be ignored.
     */
    timeScale: number;
    animationSpeed: number;
    animateOnScroll: boolean;
    private _scrollAnimationState;
    scrollAnimationDamping: number;
    animateOnDrag: boolean;
    dragAxis: 'x' | 'y';
    /**
     * If true, the animation will be played automatically when the model(any model with animations) is loaded.
     */
    autoplayOnLoad: boolean;
    private _dragAnimationState;
    dragAnimationDamping: number;
    dependencies: (typeof AssetManagerPlugin)[];
    private _pointerDragHelper;
    private _lastFrameTime;
    private _wheel;
    private _drag;
    private _fadeDisabled;
    private _postFrame;
    private _objectAdded;
    constructor();
    private _loaderCreate;
    onAdded(viewer: ViewerApp): Promise<void>;
    onRemove(viewer: ViewerApp): Promise<void>;
    private _animationTime;
    private _animationDuration;
    protected _animationState: 'none' | 'playing' | 'paused' | 'stopped';
    private _onPropertyChange;
    onStateChange(): void;
    uiConfig?: UiObjectConfig;
    playPauseAnimation(): void;
    /**
     * This will play a single clip by name
     * It might reset all other animations, this is a bug; https://codepen.io/repalash/pen/mdjgpvx
     * @param name
     * @param resetOnEnd
     */
    playClip(name: string, resetOnEnd?: boolean): Promise<void>;
    playClips(names: string[], resetOnEnd?: boolean): Promise<void>;
    private _lastAnimId;
    /**
     * Starts all the animations and returns a promise that resolves when all animations are done.
     * @param resetOnEnd - if true, will reset the animation to the start position when it ends.
     * @param animations - play specific animations, otherwise play all animations. Note: the promise returned (if this is set) from this will resolve before time if the animations was ever paused, or converged mode is on in recorder.
     */
    playAnimation(resetOnEnd?: boolean, animations?: AnimationAction[]): Promise<void>;
    pauseAnimation(): void;
    resumeAnimation(): void;
    stopAnimation(reset?: boolean): void;
    resetAnimation(): void;
    static readonly AnimationMarkersExtension = "WEBGI_animation_markers";
    timelineMarkers: any[];
}
//# sourceMappingURL=GLTFAnimationPlugin.d.ts.map