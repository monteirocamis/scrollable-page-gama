import { UiObjectConfig } from 'webgi/interfaces';
import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import type { IConvergedCanvasRecorder } from 'webgi/plugins/threejs/ProgressivePlugin';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { ICanvasRecorder } from 'webgi/extras/canvas_recorder/ACanvasRecorder';
export declare class CanvasRecorderPlugin extends AViewerPlugin<'start' | 'stop' | 'error' | 'encode-progress'> implements IConvergedCanvasRecorder {
    enabled: boolean;
    get recorder(): ICanvasRecorder<any> | undefined;
    constructor();
    isRecording(): boolean;
    static readonly PluginType = "CanvasRecorder";
    private _recordIndicator?;
    convergeMode: boolean;
    mimeType: 'auto' | 'image/png' | 'image/jpeg' | 'video/mp4' | string;
    videoFrameRate: number;
    private _recorders;
    private _recorder?;
    refreshRecorderOptions(): void;
    onAdded(viewer: ViewerApp): Promise<void>;
    private _renderToScreenDisabled;
    private _preRender;
    private _postRender;
    private _refreshUi;
    private _stateChange;
    onRemove(viewer: ViewerApp): Promise<void>;
    record(action: () => Promise<any>, onStart?: () => void): Promise<Blob | undefined>;
    startRecording(): boolean;
    stopRecording(): Promise<Blob | undefined>;
    private _downloadBlob;
    uiConfig: UiObjectConfig;
    protected _getRecorder(type: 'ffmpeg.js' | 'canvas-media' | 'image'): ICanvasRecorder<any> | undefined;
}
//# sourceMappingURL=CanvasRecorderPlugin.d.ts.map