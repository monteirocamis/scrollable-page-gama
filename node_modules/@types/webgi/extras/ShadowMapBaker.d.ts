import { BufferGeometry, Mesh, MeshStandardMaterial, WebGLRenderTarget } from 'three';
import { IRenderTarget } from 'webgi/interfaces';
import { RandomizedDirectionalLight } from 'webgi/extras/RandomizedDirectionalLight';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { IDisposable, SimpleEventDispatcher } from 'ts-browser-helpers';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
export declare class ShadowMapBaker extends SimpleEventDispatcher<'shadowBaking' | 'shadowBaked'> implements IDisposable {
    enabled: boolean;
    get attachedMesh(): Mesh<BufferGeometry, MeshStandardMaterial> | undefined;
    set attachedMesh(value: Mesh<BufferGeometry, MeshStandardMaterial> | undefined);
    private _shadowMat;
    private _shadowBlurMat;
    get target(): IRenderTarget & WebGLRenderTarget | undefined;
    private _target?;
    get light(): RandomizedDirectionalLight;
    private readonly _light;
    private readonly _lightLayer;
    private _viewer;
    constructor(viewer: ViewerApp);
    dispose(): void;
    cleanupMaterial(): void;
    private _frameNumber;
    maxFrameNumber: number;
    smoothShadow: boolean;
    private _attachedMesh;
    groundMapMode: 'aoMap' | 'map' | 'alphaMap';
    alphaVignette: boolean;
    alphaVignetteAxis: string;
    private _groundMapModeChanged;
    private _alphaVignetteChanged;
    fromJSON(data: any, meta?: any): this;
    reset(): void;
    get frameNumber(): number;
    shadowAutoUpdate: boolean;
    private _bakeCounter;
    maxBakeCount: number;
    autoUpdateShadow(): boolean;
    updateShadow(): boolean;
    private _updateMaterial;
    private _applySmoothFilter;
    readonly materialExtension: MaterialExtension;
}
//# sourceMappingURL=ShadowMapBaker.d.ts.map