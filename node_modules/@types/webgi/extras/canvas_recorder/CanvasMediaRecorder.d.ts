import { ACanvasRecorder, CanvasRecorderOptions } from './ACanvasRecorder';
export declare class CanvasMediaRecorder extends ACanvasRecorder {
    private _recorder?;
    private _track;
    protected _setOptions(value: Partial<CanvasRecorderOptions>): void;
    setOptions(options: Partial<CanvasRecorderOptions>): void;
    private _recordingCallback?;
    constructor(canvas: HTMLCanvasElement, options?: Partial<CanvasRecorderOptions>);
    start(): void;
    private _resumeSyncTime;
    requestFrame(): boolean;
    pause(): void;
    stop(recordingCallback: (b: Blob) => void): void;
    dispose(): void;
    private _onstop;
    private _onstart;
    private _onresume;
    private _onerror;
    static GetSupportedMimeTypes(types?: string[], codecs?: string[], firstOnly?: boolean): string[] | string | undefined;
}
declare global {
    interface HTMLCanvasElement {
        captureStream(frameRate?: number): MediaStream;
    }
}
//# sourceMappingURL=CanvasMediaRecorder.d.ts.map