import { Intersection, Object3D, Raycaster, Vector2 } from 'three';
import { SimpleEventDispatcher } from 'ts-browser-helpers';
import { ICamera, ICameraOptions, IScene } from 'webgi/interfaces';
export declare class ObjectPicker extends SimpleEventDispatcher<'hoverObjectChanged' | 'selectedObjectChanged' | 'hitObject'> {
    private _firstHit;
    get scene(): IScene;
    set scene(value: IScene);
    hoverEnabled: boolean;
    private _scene;
    private _camera?;
    private _mouseDownTime;
    private _mouseUpTime;
    private _time;
    selectionCondition: (o: Object3D) => boolean;
    raycaster: Raycaster;
    mouse: Vector2;
    private _selected;
    private _hovering;
    cursorStyles: {
        default: string;
        down: string;
    };
    domElement: HTMLElement;
    constructor(scene: IScene, domElement: HTMLElement, camera?: ICamera<ICameraOptions>, selectionCondition?: (o: Object3D) => boolean);
    private _activeCameraChange;
    get camera(): ICamera<ICameraOptions, any, any> | undefined;
    set camera(value: ICamera<ICameraOptions, any, any> | undefined);
    get selectedObject(): Object3D | null;
    /**
     * @param object {THREE.Object3D}
     */
    set selectedObject(object: Object3D | null);
    get hoverObject(): Object3D | Object3D[] | null;
    /**
     * @param object {THREE.Object3D}
     */
    set hoverObject(object: Object3D | Object3D[] | null);
    get time(): number;
    get isMouseDown(): boolean;
    get mouseDownDeltaTime(): number;
    onPointerMove(event: PointerEvent): void;
    onPointerLeave(event: PointerEvent): void;
    onPointerEnter(event: PointerEvent): void;
    onPointerCancel(event: PointerEvent): void;
    updateMouseFromEvent(event: PointerEvent): void;
    onPointerDown(event: PointerEvent): undefined;
    onPointerUp(event: PointerEvent): undefined;
    onPointerClick(event: PointerEvent): void;
    addPasses(): void;
    checkIntersection(): {
        selectedObject: Object3D<import("three").Event, string>;
        intersect: Intersection<Object3D<import("three").Event, string>>;
        intersects: Intersection<Object3D<import("three").Event, string>>[];
        mouse: import("three").Vector2Tuple;
    } | null;
    isHovering(): boolean;
    isSelected(): boolean;
}
//# sourceMappingURL=ObjectPicker.d.ts.map