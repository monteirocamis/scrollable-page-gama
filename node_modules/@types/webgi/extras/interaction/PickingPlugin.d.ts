import { AViewerPlugin } from 'webgi/core/AViewerPlugin';
import { IModel, IWidget, UiObjectConfig } from 'webgi/interfaces';
import { Object3D } from 'three';
import { ObjectPicker } from 'webgi/extras/interaction/ObjectPicker';
import { TransformControls } from 'three/examples/jsm/controls/TransformControls';
import { SelectionWidget } from 'webgi/extras/interaction/SelectionWidget';
import { ViewerApp } from 'webgi/viewer/ViewerApp';
import { Class } from 'ts-browser-helpers';
export declare class PickingPlugin extends AViewerPlugin<'selectedObjectChanged' | 'hoverObjectChanged' | 'hitObject'> {
    enabled: boolean;
    private _enableWidget;
    get picker(): ObjectPicker | undefined;
    static readonly PluginType = "Picking";
    private _picker?;
    private _widget?;
    private _transformControls?;
    private _controls;
    private _pickUi;
    autoFocus: boolean;
    setDirty(): void;
    constructor(selection?: Class<SelectionWidget> | undefined, controls?: boolean, pickUi?: boolean, autoFocus?: boolean);
    getSelectedObject<T extends Object3D | IModel = IModel & Object3D>(): T | undefined;
    setSelectedObject(object: Object3D | undefined, focusCamera?: boolean): void;
    onAdded(viewer: ViewerApp): Promise<void>;
    private _onObjectHit;
    focusObject(selected?: Object3D): Promise<void>;
    enableWidget(enable: boolean): void;
    private _uiConfig?;
    private _uiConfigChildren;
    get uiConfig(): UiObjectConfig;
    get transformControls(): (TransformControls & IWidget) | undefined;
    get widget(): SelectionWidget | undefined;
}
//# sourceMappingURL=PickingPlugin.d.ts.map