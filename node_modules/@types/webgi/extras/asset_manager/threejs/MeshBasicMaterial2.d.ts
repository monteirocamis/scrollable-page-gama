import { BufferGeometry, Camera, Event, IUniform, Material, MeshBasicMaterial, MeshPhysicalMaterialParameters, Object3D, Scene, Shader, WebGLRenderer } from 'three';
import { IMaterial, UiObjectConfig } from 'webgi/interfaces';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
import { AnyOptions } from 'ts-browser-helpers';
export declare const basicMaterialPropList: {
    color: string;
    map: null;
    lightMap: null;
    lightMapIntensity: number;
    aoMap: null;
    aoMapIntensity: number;
    specularMap: null;
    alphaMap: null;
    envMap: null;
    combine: 0;
    reflectivity: number;
    refractionRatio: number;
    wireframe: boolean;
    wireframeLinewidth: number;
    wireframeLinecap: string;
    wireframeLinejoin: string;
    skinning: boolean;
    fog: boolean;
    name: string;
    blending: 1;
    side: 0;
    vertexColors: boolean;
    opacity: number;
    transparent: boolean;
    blendSrc: 204;
    blendDst: 205;
    blendEquation: 100;
    blendSrcAlpha: null;
    blendDstAlpha: null;
    blendEquationAlpha: null;
    depthFunc: 3;
    depthTest: boolean;
    depthWrite: boolean;
    stencilWriteMask: number;
    stencilFunc: 519;
    stencilRef: number;
    stencilFuncMask: number;
    stencilFail: 7680;
    stencilZFail: 7680;
    stencilZPass: 7680;
    stencilWrite: boolean;
    clippingPlanes: null;
    clipIntersection: boolean;
    clipShadows: boolean;
    shadowSide: null;
    colorWrite: boolean;
    precision: null;
    polygonOffset: boolean;
    polygonOffsetFactor: number;
    polygonOffsetUnits: number;
    dithering: boolean;
    alphaToCoverage: boolean;
    premultipliedAlpha: boolean;
    forceSinglePass: boolean;
    visible: boolean;
    toneMapped: boolean;
    userData: {};
    alphaTest: number;
};
export declare class MeshBasicMaterial2 extends MeshBasicMaterial<Event, 'beforeCompile' | 'materialUpdate' | 'beforeRender' | 'afterRender'> implements IMaterial {
    materialExtensions: MaterialExtension[];
    static readonly TypeSlug = "bmat";
    static readonly TYPE = "MeshBasicMaterial2";
    readonly typeSlug = "bmat";
    assetType: 'material';
    materialObject: this;
    isMeshBasicMaterial2: boolean;
    constructor(parameters?: MeshPhysicalMaterialParameters & {
        customMaterialExtensions?: MaterialExtension[];
    });
    setDirty(options?: AnyOptions): void;
    registerMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    unregisterMaterialExtensions(customMaterialExtensions: MaterialExtension[]): void;
    private _uiConfig?;
    private _uiConfigChildren?;
    get uiConfig(): UiObjectConfig;
    onBeforeCompile(shader: Shader, renderer: WebGLRenderer): void;
    customProgramCacheKey(): string;
    extraUniformsToUpload: Record<string, IUniform>;
    onBeforeRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    onAfterRender(renderer: WebGLRenderer, scene: Scene, camera: Camera, geometry: BufferGeometry, object: Object3D): void;
    copyProps(oldMaterial: Material, allowUnknownType?: boolean): this;
    toJSON(meta?: any): any;
    fromJSON(data: any, meta?: any, allowUnknownType?: boolean): this | null;
    clone(): this;
}
//# sourceMappingURL=MeshBasicMaterial2.d.ts.map