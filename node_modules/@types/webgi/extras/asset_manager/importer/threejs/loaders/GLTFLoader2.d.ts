import { GLTF, GLTFLoader, GLTFLoaderPlugin, GLTFParser } from 'three/examples/jsm/loaders/GLTFLoader';
import { LoadingManager, Object3D } from 'three';
import { ILoader } from 'webgi/extras/asset_manager/AssetManager';
import { AnyOptions } from 'ts-browser-helpers';
export declare class GLTFLoader2 extends GLTFLoader implements ILoader<GLTF, Object3D> {
    isGLTFLoader2: boolean;
    constructor(manager: LoadingManager);
    preparsers: GLTFPreparser[];
    preparse(data: ArrayBuffer | string, path: string): Promise<ArrayBuffer | string>;
    parse(data: ArrayBuffer | string, path: string, onLoad: (gltf: GLTF) => void, onError?: (event: ErrorEvent) => void, url?: string): void;
    transform(res: GLTF, options: AnyOptions): Object3D;
    register(callback: (parser: GLTFParser) => GLTFLoaderPlugin): this;
}
export interface GLTFPreparser {
    process(data: string | ArrayBuffer, path: string): Promise<string | ArrayBuffer>;
    [key: string]: any;
}
export interface IGLBEncryptionPreparser extends GLTFPreparser {
    key: string | ((encryption: any, json: any, path: string) => string | Promise<string>);
}
export declare const glbEncryptionPreparser: IGLBEncryptionPreparser;
//# sourceMappingURL=GLTFLoader2.d.ts.map