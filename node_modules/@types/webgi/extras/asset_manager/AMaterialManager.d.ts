import { AnyOptions, IDisposable, IEventDispatcher, SimpleEventDispatcher } from 'ts-browser-helpers';
import { IMaterial, IModel, ITexture } from 'webgi/interfaces';
import { MaterialExtension } from 'webgi/extras/asset_manager/threejs/MaterialExtender';
export interface IMaterialManager extends IEventDispatcher<string>, IDisposable {
    findOrCreate(info: string, params?: AnyOptions): IMaterial | undefined;
    generateFromTemplate(name: string, params?: AnyOptions): IMaterial | undefined;
    generateFromTemplateType(type: string, params?: AnyOptions): IMaterial | undefined;
    findTemplate(name: string): IMaterialTemplate | undefined;
    registerMaterial(material: IMaterial): void;
    registerMaterialObject(material: any): void;
    unregisterMaterial(material: IMaterial): void;
    registerMaterialTemplate(template: IMaterialTemplate): void;
    unregisterMaterialTemplate(template: IMaterialTemplate): void;
    findMaterial(uuid: string): IMaterial | undefined;
    findMaterialsByName(name: string): IMaterial[];
    getMaterialsOfType<TM extends IMaterial = IMaterial>(typeSlug: string | undefined): TM[];
    getAllMaterials(): IMaterial[];
    processModel(object: IModel, options: AnyOptions): IModel;
    processMaterial(material: IMaterial, options: AnyOptions): IMaterial;
    registerMaterialExtension(extension: MaterialExtension): void;
    unregisterMaterialExtension(extension: MaterialExtension): void;
    exportMaterial(material: IMaterial, filename?: string, minify?: boolean, download?: boolean): File;
    applyMaterial(material: IMaterial, nameOrUuid: string): boolean;
}
export type IMaterialGenerator = (params: any, oldMaterial: any) => IMaterial;
export interface IMaterialTemplate {
    templateUUID?: string;
    name: string;
    materialType: string;
    generator?: IMaterialGenerator;
    [id: string]: string | number | any;
}
export declare abstract class AMaterialManager<T extends string> extends SimpleEventDispatcher<T> implements IMaterialManager {
    private _templates;
    private _materials;
    constructor();
    /**
     * @param info: uuid or template name
     */
    findOrCreate(info: string, params?: AnyOptions): IMaterial | undefined;
    generateFromTemplate(name: string, params?: AnyOptions): IMaterial | undefined;
    generateFromTemplateType(type: string, params?: AnyOptions): IMaterial | undefined;
    findTemplate(name: string): IMaterialTemplate | undefined;
    protected abstract _generateFromTemplate(template: IMaterialTemplate, oldMaterial?: AnyOptions): IMaterial | undefined;
    protected _refreshTextureRefs(materials?: IMaterial[]): void;
    protected _getMapsForMaterial(material: IMaterial): Set<ITexture<any>>;
    protected _disposeMaterial: (e: {
        target?: IMaterial;
    }) => void;
    registerMaterial(material: IMaterial): void;
    registerMaterialObject(material: any): IMaterial;
    /**
     * This is done automatically on material dispose.
     * @param material
     */
    unregisterMaterial(material: IMaterial): void;
    registerMaterialTemplate(template: IMaterialTemplate): void;
    unregisterMaterialTemplate(template: IMaterialTemplate): void;
    dispose(disposeRuntimeMaterials?: boolean): void;
    findMaterial(uuid: string): IMaterial | undefined;
    findMaterialsByName(name: string | RegExp, regex?: boolean): IMaterial[];
    getMaterialsOfType<TM extends IMaterial = IMaterial>(typeSlug: string | undefined): TM[];
    getAllMaterials(): IMaterial[];
    processModel(object: IModel, options: AnyOptions): IModel;
    protected abstract _processModel(object: any, options: AnyOptions): any;
    protected _processMaterial(material: any, options: AnyOptions & {
        useSourceMaterial?: boolean;
        materialTemplate?: string;
    }): IMaterial | undefined;
    processMaterial(material: IMaterial, options: AnyOptions & {
        useSourceMaterial?: boolean;
        materialTemplate?: string;
        register?: boolean;
    }): IMaterial;
    protected _materialExtensions: MaterialExtension[];
    registerMaterialExtension(extension: MaterialExtension): void;
    unregisterMaterialExtension(extension: MaterialExtension): void;
    exportMaterial(material: IMaterial, filename?: string, minify?: boolean, download?: boolean): File;
    applyMaterial(material: IMaterial, nameOrUuid: string): boolean;
}
//# sourceMappingURL=AMaterialManager.d.ts.map